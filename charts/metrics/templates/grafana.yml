apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: "{{ template "metrics.chart" . }}-grafana"
  labels:
    app: "{{ template "metrics.name" . }}-grafana"
    release: "{{ .Release.Name }}-grafana"
    chart: "{{ template "metrics.chart" . }}-grafana"
    heritage: "{{ .Release.Service }}-grafana"
spec:
  replicas: {{ .Values.grafana.replicas }}
  selector:
    matchLabels:
      app: "{{ template "metrics.name" . }}-grafana"
      release: "{{ .Release.Name }}-grafana"
  strategy:
    rollingUpdate:
      maxSurge: "{{ .Values.grafana.deploy.maxSurge }}"
      maxUnavailable: "{{ .Values.grafana.deploy.maxUnavailable }}"
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: "{{ template "metrics.name" . }}-grafana"
        release: "{{ .Release.Name }}-grafana"
    spec:
      containers:
      - image: "{{ .Values.grafana.image }}:{{ .Values.grafana.tag }}"
        imagePullPolicy: IfNotPresent
        name: grafana
        ports:
        - containerPort: 3000
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 2500Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - mountPath: /var/lib/grafana
          name: data
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: data
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-grafana-svc"
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 3000
  selector:
      app: "{{ template "metrics.name" . }}-grafana"
      release: "{{ .Release.Name }}-grafana"
  type: NodePort

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: grafana-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: grafana.kube.com
    http:
      paths:
      - path: /
        backend:
          serviceName: "{{ .Release.Name }}-grafana-svc"
          servicePort: 80
